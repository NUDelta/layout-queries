import { Meteor } from 'meteor/meteor';
import ProExamples from '../../api/ProExamples/ProExamples.js';



Meteor.startup( () => {

	// populate pro examples if collection's empty
	if (ProExamples.find().count() === 0) {
		const data = [
			{
				source: 'xkcd.com',
				code: "var Map = function ($container) {\n\n\n\n\t$container.css({\n\t\t\"z-index\": 1,\n\t\toverflow: \"hidden\",\n\t\twidth: \"740px\",\n\t\theight: \"694px\",\n\t\tmargin: \"0px auto 0\",\n\t\tbackground: \"#fff\",\n\t\tposition: \"relative\"\n\t});\n \tvar $overlay = $container.children(\"img\");\n\t$overlay.css({\n\t\tbackground: \"transparent\",\n\t\tposition: \"relative\"\n\t});\n\n\n\n\tvar sign = function (x) {\n\t\treturn x > 0 ? +1 : x < 0 ? -1 : 0;\n\t};\n\tvar clamp = function (x, min, max) {\n\t\treturn Math.max(Math.min(x, max), min);\n\t};\n\n\n\n\tvar offset = $container.offset();\n\tvar padding_top = 200;\n\tvar size = [14, 48, 25, 33];\n\tvar tilesize = 2048;\n\tvar visible = [];\n\tvar container_size = [$container.width(), $container.height()];\n\tvar scroll_delta = null;\n\tvar $map = $container.children(\".map\");\n\tvar map_size = [(size[1] + size[3]) * tilesize, (size[0] + size[2]) * tilesize];\n\n\n\n\t$map.css({\n\t\twidth: map_size[0],\n\t\theight: map_size[1],\n\t\tposition: \"absolute\",\n\t\tzIndex: -1\n\t});\n \tvar position = [-(size[3] + .03) * tilesize, -(size[0] - .55) * tilesize];\n\t$map.find(\".ground\").css({\n\t\ttop: size[0] * tilesize,\n\t\theight: size[2] * tilesize,\n\t\tposition: \"absolute\",\n\t\twidth: \"100%\",\n\t\tzIndex: -1,\n\t\tbackground: \"#000\"\n\t});\n\tvar centre = [-1, 0];\n\t\n\n\n\tvar update = function () {\n\t\t$map.css({\n\t\t\tleft: position[0],\n\t\t\ttop: position[1]\n\t\t});\n\n\t\tvar centre_last = centre;\n\t\tcentre = [Math.floor(-position[0] / tilesize), Math.floor(-position[1] / tilesize)];\n\n\t\ttile_name = function (x, y) {\n\t\t\tx -= size[3];\n\t\t\ty -= size[0];\n\t\t\treturn (y >= 0 ? y + 1 + \"s\" : -y + \"n\") + (x >= 0 ? x + 1 + \"e\" : -x + \"w\");\n\t\t};\n\n\t\tif (centre[0] != centre_last[0] || centre[1] != centre_last[1]) {\n\t\t\tvar $remove = $map.children().not(\".ground\");\n\n\t\t\tfor (var y = -1; y <= +1; y++) {\n\t\t\t\tfor (var x = -1; x <= +1; x++) {\n\t\t\t\t\tvar name = tile_name(centre[0] + x, centre[1] + y);\n\t\t\t\t\tvar tile = $map.find(\".tile\" + name);\n\n\t\t\t\t\tif (tile.length) {\n\t\t\t\t\t\t$remove = $remove.not(tile);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$image = $('<img class=\"tile' + name + '\" src=\"http://imgs.xkcd.com/clickdrag/' + name + '.png\" style=\"top:' + (centre[1] + y) * tilesize + \"px;left:\" + (centre[0] + x) * tilesize + 'px; z-index: -1; position: absolute;;\" style=\"display:none\" />');\n\t\t\t\t\t\t$image.load(function () {\n\t\t\t\t\t\t\t$(this).show();\n\t\t\t\t\t\t}).error(function () {\n\t\t\t\t\t\t\t$(this).remove();\n\t\t\t\t\t\t});\n\t\t\t\t\t\t$map.append($image);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$remove.remove();\n\t\t}\n\t};\n\tupdate();\n\n\n\n\tfunction drag(e) {\n\t\tif (scroll_delta) {\n\t\t\tvar pos = eventPos(e);\n\t\t\tposition[0] = Math.round(clamp(pos.pageX + scroll_delta[0], -(size[1] + size[3]) * tilesize + container_size[0], 0));\n\t\t\tposition[1] = Math.round(clamp(pos.pageY + scroll_delta[1], -(size[0] + size[2]) * tilesize + container_size[1], 0));\n\t\t\tupdate();\n\t\t}\n\t}\n\n\n\n\t$container.on(\"mousedown touchstart\", function (e) {\n\t\tif (e.button && e.button >= 2) {\n\t\t\treturn;\n\t\t}\n\t\tvar pos = eventPos(e);\n\t\tscroll_delta = [position[0] - pos.pageX, position[1] - pos.pageY];\n\t\t$(document).on(\"mousedown\" == e.type ? \"mousemove\" : \"touchmove\", drag);\n\t\te.preventDefault();\n\t});\n\n\n\n\t$(document).on(\"mouseup touchend\", function (e) {\n\t\t$(document).off(\"mousemove touchmove\", drag);\n\t\tscroll_delta = null;\n\t});\n\n\n\n};\n\n\n\n$(function () {\n\tvar map = new Map($(\"#comic\"));\n});\n",
				componentPattern: 'Draggable Map',
				technologies: ['jQuery']
			},
			{
				source: 'archfire.org',
				code: "document.getElementById(\"span0000\").myDragFlag = false;\ndocument.getElementById(\"span0000\").onmousedown = function(e) {\n    if (0 == e.button) {\n        this.startX = e.pageX - this.offsetLeft;\n        this.startY = e.pageY - this.offsetTop;\n        this.myDragFlag = true;\n    }\n};\ndocument.getElementById(\"span0000\").onmousemove = function(e) {\n    var bcr = this.getBoundingClientRect();\n    if (this.myDragFlag) {\n        this.style.left = e.pageX - this.startX + \"px\";\n        this.style.top = e.pageY - this.startY + \"px\";\n        document.getElementById(\"txt\").value = \"getBoundingClientRect.left=\" + bcr.left +\n            \"\\n\" + \"getBoundingClientRect.top=\" + bcr.top + \"\\n\" +\n            \"getBoundingClientRect.width=\" + bcr.width + \"\\n\" +\n            \"getBoundingClientRect.height=\" + bcr.height + \"\\n\" +\n            \"getBoundingClientRect.bottom=\" + bcr.bottom + \"\\n\" +\n            \"getBoundingClientRect.right=\" + bcr.right + \"\\n\" + \"e.pageX=\" + e.pageX +\n            \"\\n\" + \"e.pageY=\" + e.pageY + \"\\n\" + \"this.offsetLeft=\" + this.offsetLeft +\n            \"\\n\" + \"this.offsetTop=\" + this.offsetTop + \"\\n\" + \"relatX=\" + (e.pageX -\n                this.offsetLeft) + \"\\n\" + \"relatY=\" + (e.pageY - this.offsetTop);\n    }\n};\ndocument.getElementById(\"span0000\").onmouseup = function(e) {\n    if (0 == e.button) {\n        this.myDragFlag = false;\n    }\n};\ndocument.getElementById(\"span0000\").onmouseout = function(e) {\n    if (true == this.myDragFlag) {\n        var minEdge = 48;\n        var edgeCorrect = .9;\n        var minEdgeCorrect = minEdge * edgeCorrect | 0;\n        var bcr = this.getBoundingClientRect();\n        var bcrw = bcr.width;\n        var bcrh = bcr.height;\n        if (this.startX < minEdge) {\n            this.style.left = e.pageX - minEdgeCorrect + \"px\";\n        } else {\n            if (this.startX > bcrw - minEdge) {\n                this.style.left = e.pageX - this.startX + minEdgeCorrect + \"px\";\n            }\n        }\n        if (this.startY < minEdge) {\n            this.style.top = e.pageY - minEdgeCorrect + \"px\";\n        } else {\n            if (this.startY > bcrh - minEdge) {\n                this.style.top = e.pageY - this.startY + minEdgeCorrect + \"px\";\n            }\n        }\n    }\n};",
				componentPattern: 'Draggable Map',
				technologies: []
			},
			{
				source: 'thorsummoner.github.io',
				code: "function init_render() {\n    tick += 1;\n    if (active) {\n        $(\"#background\").attr(\"width\", window.innerWidth);\n        $(\"#background\").attr(\"height\", window.innerHeight);\n        background.context.clearRect(0, 0, background.canvas.width, background.canvas\n            .height);\n        i = 0;\n        for (var y = 0; y < background.map.map.height; y++) {\n            for (var x = 0; x < background.map.map.width; x++) {\n                var red = background.map.tileque.data[4 * (background.map.map.width * y + x)];\n                var green = background.map.tileque.data[4 * (background.map.map.width * y +\n                    x) + 1];\n                var blue = background.map.tileque.data[4 * (background.map.map.width * y +\n                    x) + 2];\n                var alpha = background.map.tileque.data[4 * (background.map.map.width * y +\n                    x) + 3];\n                if (x * background.map.wh[0] + background.map.offset[0] > 0 - background.map\n                    .wh[0] && y * background.map.wh[1] + background.map.offset[1] > 0 -\n                    background.map.wh[1] && x * background.map.wh[0] + background.map.offset[0] <\n                    window.innerWidth + background.map.wh[0] && y * background.map.wh[1] +\n                    background.map.offset[1] < window.innerHeight + background.map.wh[1]) {\n                    tilesdrawn++;\n                    background.context.drawImage(background.map.tileset, red * background.map.step[\n                            0], blue * background.map.step[1], background.map.wh[0], background.map\n                        .wh[1], x * background.map.wh[0] + background.map.offset[0], y *\n                        background.map.wh[1] + background.map.offset[1], background.map.wh[0],\n                        background.map.wh[1]);\n                }\n            }\n        }\n        $(\"#tilesdrawn\").html(tilesdrawn);\n        tilesdrawn = 0;\n    }\n    runque();\n    $(\"#depressed\").html(depressedkeys.length);\n    playermove();\n    if (render) {\n        if (framerate) {\n            var t = setTimeout(\"init_render();\", 1e3 / framerate);\n        } else {\n            var t = setTimeout(\"init_render();\", 1);\n        }\n    }\n}\n\nfunction mon_fps() {\n    $(\"#framerate\").html(tick + \" fps\");\n    tick = 0;\n    var t = setTimeout(\"mon_fps();\", 1e3);\n}\n$(document).mousemove(function(e) {\n    $(\"#mu\").html(e.clientX - click.x + \" \" + (e.clientY - click.y));\n    cursor.map.x = e.clientX;\n    cursor.map.y = e.clientY;\n    if (click.c) {\n        background.map.offset = [click.offset.x + (e.clientX - click.x), click.offset\n            .y + (e.clientY - click.y)\n        ];\n        if (background.map.offset[0] > 0) {\n            background.map.offset[0] = 0;\n        }\n        if (background.map.offset[1] > 0) {\n            background.map.offset[1] = 0;\n        }\n        if (background.map.offset[0] < 0 - (background.map.resolution[0] *\n                background.map.wh[0] - window.innerWidth)) {\n            background.map.offset[0] = 0 - (background.map.resolution[0] * background.map\n                .wh[0] - window.innerWidth);\n        }\n        if (background.map.offset[1] < 0 - (background.map.resolution[1] *\n                background.map.wh[1] - window.innerHeight)) {\n            background.map.offset[1] = 0 - (background.map.resolution[1] * background.map\n                .wh[1] - window.innerHeight);\n        }\n    }\n});\n$(document).ready(function() {\n    init_playerframecount();\n    $(\"#mech-audio\").click(function(e) {\n        if (mech.audio) {\n            mech.audio = false;\n            $(\"#audio-bgloop\").audivid(\"pause\");\n        } else {\n            mech.audio = true;\n            $(\"#audio-bgloop\").audivid(\"play\");\n        }\n    });\n    background = new Object();\n    background.canvas = document.getElementById(\"background\");\n    background.context = background.canvas.getContext(\"2d\");\n    background.dir = \"pallete/tilesets/fullmap/\";\n    background.map = new Object();\n    background.map.tileset = new Image();\n    background.map.map = new Image();\n    var s = window.document.createElement(\"script\");\n    s.src = \"pallete/tilesets/fullmap/random.js\";\n    window.document.body.appendChild(s);\n    s.onload = function() {\n        background.map.tileset.src = background.dir + tileset + \".png\";\n        background.map.map.src = background.dir + mapfile + \".png\";\n    };\n    background.map.tileset.onload = function() {\n        background.map.tilesetloaded = true;\n        tryproceed001();\n    };\n    background.map.map.onload = function() {\n        background.map.maploaded = true;\n        tryproceed001();\n    };\n    init_player();\n});",
				componentPattern: 'Draggable Map',
				technologies: ['jQuery', 'Canvas']
			}
		];

		data.forEach((proExample) => {
			const proExampleId = ProExamples.insert({
				source:           proExample.source,
				code:             proExample.code,
				componentPattern: proExample.componentPattern,
				technologies:     proExample.technologies
			});
		});
	}
});